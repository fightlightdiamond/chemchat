# Default values for ChemChat
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: chemchat
  version: "1.0.0"
  
image:
  registry: ghcr.io
  repository: chemchat/chemchat
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  annotations: {}
  labels: {}
  
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
  
  podLabels: {}
  
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  terminationGracePeriodSeconds: 30

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/websocket-services: "chemchat-service"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.chemchat.com
      paths:
        - path: /
          pathType: Prefix
    - host: ws.chemchat.com
      paths:
        - path: /socket.io
          pathType: Prefix
  tls:
    - secretName: chemchat-tls
      hosts:
        - api.chemchat.com
        - ws.chemchat.com

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  customMetrics:
    - type: Pods
      pods:
        metric:
          name: websocket_connections_per_pod
        target:
          type: AverageValue
          averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

# Environment configuration
env:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  SWAGGER_ENABLED: "true"
  CORS_ORIGIN: "*"
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  JWT_EXPIRES_IN: "15m"
  JWT_REFRESH_EXPIRES_IN: "7d"
  WEBSOCKET_TOKEN_EXPIRES_IN: "1h"
  HEALTH_CHECK_TIMEOUT: "5000"
  GRACEFUL_SHUTDOWN_TIMEOUT: "30000"
  JAEGER_ENDPOINT: "http://jaeger-collector:14268/api/traces"
  PROMETHEUS_METRICS_PATH: "/metrics"

# Secrets configuration
secrets:
  create: true
  annotations: {}
  data:
    POSTGRES_PASSWORD: "changeme-production"
    JWT_SECRET: "changeme-jwt-secret-production-256bit"
    REDIS_PASSWORD: "changeme-redis-production"
    AWS_ACCESS_KEY_ID: "changeme-aws-access-key"
    AWS_SECRET_ACCESS_KEY: "changeme-aws-secret-key"
    FIREBASE_PRIVATE_KEY: "changeme-firebase-private-key"
    SMTP_PASSWORD: "changeme-smtp-password"

# Health checks
healthChecks:
  liveness:
    enabled: true
    path: /health
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readiness:
    enabled: true
    path: /health/ready
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  startup:
    enabled: true
    path: /health
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 30

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets"]
      verbs: ["get", "list", "watch"]

# PostgreSQL dependency configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "changeme-postgres-admin"
    username: "chemchat"
    password: "changeme-production"
    database: "chemchat"
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
  metrics:
    enabled: true

# Redis dependency configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "changeme-redis-production"
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  metrics:
    enabled: true

# Elasticsearch dependency configuration
elasticsearch:
  enabled: true
  clusterName: "chemchat-cluster"
  nodeGroup: "master"
  masterService: "chemchat-elasticsearch"
  replicas: 1
  minimumMasterNodes: 1
  esMajorVersion: ""
  esConfig:
    elasticsearch.yml: |
      cluster.name: "chemchat-cluster"
      network.host: 0.0.0.0
      xpack.security.enabled: false
      discovery.type: single-node
  volumeClaimTemplate:
    accessModes: ["ReadWriteOnce"]
    storageClassName: "fast-ssd"
    resources:
      requests:
        storage: 10Gi
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"

# Kafka dependency configuration
kafka:
  enabled: true
  replicaCount: 1
  auth:
    clientProtocol: plaintext
  persistence:
    enabled: true
    size: 5Gi
    storageClass: "fast-ssd"
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  zookeeper:
    enabled: true
    persistence:
      enabled: true
      size: 2Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  metrics:
    kafka:
      enabled: true
    jmx:
      enabled: true

# Monitoring configuration
monitoring:
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}
  
  prometheusRule:
    enabled: true
    labels: {}
    annotations: {}
    rules:
      - alert: ChemChatHighCPU
        expr: rate(container_cpu_usage_seconds_total{pod=~"chemchat-.*"}[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "ChemChat API high CPU usage"
      
      - alert: ChemChatHighMemory
        expr: container_memory_usage_bytes{pod=~"chemchat-.*"} / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "ChemChat API high memory usage"

# Network Policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: 1

# Init containers
initContainers:
  waitForDependencies:
    enabled: true
    image:
      repository: busybox
      tag: "1.35"
    resources:
      requests:
        memory: "32Mi"
        cpu: "10m"
      limits:
        memory: "64Mi"
        cpu: "50m"
  
  databaseMigration:
    enabled: true
    command: ["npm", "run", "migrate:deploy"]
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Volumes
volumes:
  tmp:
    enabled: true
    type: emptyDir
    mountPath: /tmp
  
  cache:
    enabled: true
    type: emptyDir
    mountPath: /app/.cache

# External services configuration (when dependencies are disabled)
externalServices:
  postgresql:
    host: ""
    port: 5432
    database: "chemchat"
    username: "chemchat"
    existingSecret: ""
    existingSecretPasswordKey: "password"
  
  redis:
    host: ""
    port: 6379
    database: 0
    existingSecret: ""
    existingSecretPasswordKey: "password"
  
  elasticsearch:
    host: ""
    port: 9200
    protocol: "http"
  
  kafka:
    brokers: []
    clientId: "chemchat-api"
    groupId: "chemchat-consumers"
