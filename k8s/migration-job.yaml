apiVersion: batch/v1
kind: Job
metadata:
  name: chemchat-migration
  namespace: chemchat
  labels:
    app.kubernetes.io/name: chemchat
    app.kubernetes.io/component: migration
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chemchat
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      serviceAccountName: chemchat-migration-sa
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U chemchat_user; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: chemchat-secrets
              key: database-password
      containers:
      - name: migration
        image: chemchat:latest
        command:
        - sh
        - -c
        - |
          echo "Starting database migration..."
          
          # Create backup
          echo "Creating backup..."
          pg_dump -h postgres-service -U chemchat_user -d chemchat_db > /tmp/backup-$(date +%Y%m%d-%H%M%S).sql
          
          # Run Prisma migrations
          echo "Running Prisma migrations..."
          npx prisma migrate deploy --schema=prisma/schema.prisma
          
          # Validate migration
          echo "Validating migration..."
          npx prisma migrate status --schema=prisma/schema.prisma
          
          echo "Migration completed successfully!"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: chemchat-secrets
              key: database-url
        - name: NODE_ENV
          value: "production"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: chemchat-secrets
              key: database-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: migration-scripts
          mountPath: /app/scripts
        - name: backup-storage
          mountPath: /tmp/backups
      volumes:
      - name: migration-scripts
        configMap:
          name: migration-scripts
          defaultMode: 0755
      - name: backup-storage
        persistentVolumeClaim:
          claimName: backup-pvc
  backoffLimit: 3
  activeDeadlineSeconds: 600
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chemchat-migration-sa
  namespace: chemchat
  labels:
    app.kubernetes.io/name: chemchat
    app.kubernetes.io/component: migration
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chemchat-migration-role
  namespace: chemchat
  labels:
    app.kubernetes.io/name: chemchat
    app.kubernetes.io/component: migration
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chemchat-migration-binding
  namespace: chemchat
  labels:
    app.kubernetes.io/name: chemchat
    app.kubernetes.io/component: migration
subjects:
- kind: ServiceAccount
  name: chemchat-migration-sa
  namespace: chemchat
roleRef:
  kind: Role
  name: chemchat-migration-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migration-scripts
  namespace: chemchat
  labels:
    app.kubernetes.io/name: chemchat
    app.kubernetes.io/component: migration
data:
  migrate-zero-downtime.sh: |
    #!/bin/bash
    # Zero-downtime migration script (embedded version)
    set -euo pipefail
    
    log() {
        echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
    }
    
    error() {
        echo "[ERROR] $1" >&2
        exit 1
    }
    
    success() {
        echo "[SUCCESS] $1"
    }
    
    # Create backup
    create_backup() {
        log "Creating database backup..."
        local backup_name="backup-$(date +%Y%m%d-%H%M%S)"
        pg_dump -h postgres-service -U chemchat_user -d chemchat_db > "/tmp/backups/${backup_name}.sql"
        gzip "/tmp/backups/${backup_name}.sql"
        success "Backup created: ${backup_name}.sql.gz"
        echo "$backup_name"
    }
    
    # Run migration
    run_migration() {
        log "Running Prisma migration..."
        npx prisma migrate deploy --schema=prisma/schema.prisma || error "Migration failed"
        success "Migration completed"
    }
    
    # Validate migration
    validate_migration() {
        log "Validating migration..."
        npx prisma migrate status --schema=prisma/schema.prisma || error "Migration validation failed"
        success "Migration validation passed"
    }
    
    # Main execution
    main() {
        log "Starting zero-downtime migration"
        local backup_name
        backup_name=$(create_backup)
        run_migration
        validate_migration
        success "Zero-downtime migration completed successfully!"
    }
    
    main "$@"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: chemchat
  labels:
    app.kubernetes.io/name: chemchat
    app.kubernetes.io/component: migration
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
