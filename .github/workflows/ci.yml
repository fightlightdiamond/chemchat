name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: chemchat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      elasticsearch:
        image: elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Type check
        run: pnpm run build

      - name: Setup test database
        run: |
          pnpm run migrate:reset
          pnpm run db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/chemchat_test
          NODE_ENV: test

      - name: Run unit tests
        run: pnpm run test:unit
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/chemchat_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ELASTICSEARCH_NODE: http://localhost:9200
          NODE_ENV: test

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/chemchat_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ELASTICSEARCH_NODE: http://localhost:9200
          NODE_ENV: test

      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/chemchat_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ELASTICSEARCH_NODE: http://localhost:9200
          NODE_ENV: test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull k6 Docker image
        run: docker pull grafana/k6:latest

      - name: Verify k6 installation
        run: docker run --rm grafana/k6:latest version

      - name: Create environment file for docker-compose
        run: |
          cp .env.example .env.docker
          echo "NODE_ENV=production" >> .env.docker
          echo "DATABASE_URL=postgresql://chemchat:chemchat_password@postgres:5432/chatdb" >> .env.docker
          echo "REDIS_HOST=redis" >> .env.docker
          echo "REDIS_PORT=6379" >> .env.docker
          echo "REDIS_PASSWORD=redis_password" >> .env.docker
          echo "ELASTICSEARCH_NODE=http://elasticsearch:9200" >> .env.docker
          echo "KAFKA_BROKERS=kafka:9092" >> .env.docker

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.performance.yml up -d --build
          echo "Waiting for services to start..."
          echo "Created network: $(docker network ls | grep chemchat-network)"

      - name: Wait for PostgreSQL
        run: |
          timeout 120 bash -c 'until docker-compose exec -T postgres pg_isready -U chemchat -d chatdb; do echo "Waiting for PostgreSQL..."; sleep 5; done'

      - name: Wait for Redis
        run: |
          timeout 120 bash -c 'until docker-compose exec -T redis redis-cli -a redis_password ping; do echo "Waiting for Redis..."; sleep 5; done'

      - name: Wait for Elasticsearch
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:9200/_cluster/health; do echo "Waiting for Elasticsearch..."; sleep 5; done'

      - name: Wait for Kafka
        run: |
          timeout 120 bash -c 'until docker-compose exec -T kafka kafka-broker-api-versions --bootstrap-server localhost:9092; do echo "Waiting for Kafka..."; sleep 5; done'

      - name: Wait for ChemChat application
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:3000/health; do echo "Waiting for ChemChat app..."; sleep 10; done'

      - name: Verify load test file exists
        run: |
          if [ ! -f "test/load/load-test.js" ]; then
            echo "Error: Load test file not found at test/load/load-test.js"
            exit 1
          fi
          echo "Load test file found and verified"

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run load tests
        run: |
          echo "Starting k6 load tests..."
          docker-compose -f docker-compose.yml -f docker-compose.performance.yml run --rm k6-simple \
            run /scripts/simple-load-test.js --out json=/results/test-results.json
        env:
          K6_PROMETHEUS_RW_SERVER_URL: ${{ secrets.K6_PROMETHEUS_URL }}
          K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-test-results
          path: test-results.json

      - name: Display service logs on failure
        if: failure()
        run: |
          echo "=== ChemChat App Logs ==="
          docker-compose logs chemchat-app
          echo "=== PostgreSQL Logs ==="
          docker-compose logs postgres
          echo "=== Redis Logs ==="
          docker-compose logs redis
          echo "=== Elasticsearch Logs ==="
          docker-compose logs elasticsearch

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.performance.yml down -v
          docker system prune -f
