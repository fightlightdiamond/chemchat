name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.chemchat.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update image tag
      run: |
        sed -i "s|image: chemchat:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/chemchat-deployment.yaml

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/elasticsearch.yaml
        kubectl apply -f k8s/kafka.yaml
        kubectl apply -f k8s/chemchat-deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/chemchat-api -n chemchat-staging --timeout=600s

    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://staging-api.chemchat.com/health || exit 1
        curl -f https://staging-api.chemchat.com/api/docs || exit 1

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment completed: https://staging-api.chemchat.com'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.chemchat.com
    needs: [deploy-staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update image tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        else
          TAG=${{ github.sha }}
        fi
        sed -i "s|image: chemchat:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}|g" k8s/chemchat-deployment.yaml

    - name: Backup database
      run: |
        export KUBECONFIG=kubeconfig
        kubectl exec -n chemchat deployment/postgres -- pg_dump -U chemchat chemchat > backup-$(date +%Y%m%d-%H%M%S).sql
        
    - name: Deploy with canary strategy and zero-downtime migration
      run: |
        export KUBECONFIG=kubeconfig
        
        # Deploy infrastructure first
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/elasticsearch.yaml
        kubectl apply -f k8s/kafka.yaml
        
        # Run zero-downtime database migration
        echo "Running zero-downtime database migration..."
        kubectl apply -f k8s/migration-job.yaml
        kubectl wait --for=condition=complete job/chemchat-migration -n chemchat --timeout=600s
        
        # Check migration job status
        if kubectl get job chemchat-migration -n chemchat -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep -q "True"; then
          echo "Database migration completed successfully"
        else
          echo "Database migration failed"
          kubectl logs job/chemchat-migration -n chemchat
          exit 1
        fi
        
        # Scale down to 1 replica for canary
        kubectl patch deployment chemchat-api -n chemchat -p '{"spec":{"replicas":1}}'
        
        # Deploy new version
        kubectl apply -f k8s/chemchat-deployment.yaml
        
        # Wait for canary pod
        kubectl rollout status deployment/chemchat-api -n chemchat --timeout=300s
        
        # Health check canary
        sleep 30
        if curl -f https://api.chemchat.com/health; then
          echo "Canary health check passed"
          # Scale up to full replicas
          kubectl patch deployment chemchat-api -n chemchat -p '{"spec":{"replicas":3}}'
          kubectl rollout status deployment/chemchat-api -n chemchat --timeout=600s
        else
          echo "Canary health check failed, rolling back"
          kubectl rollout undo deployment/chemchat-api -n chemchat
          exit 1
        fi
        
        # Clean up migration job
        kubectl delete job chemchat-migration -n chemchat --ignore-not-found=true

    - name: Apply HPA and Ingress
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Run production smoke tests
      run: |
        sleep 60
        curl -f https://api.chemchat.com/health || exit 1
        curl -f https://api.chemchat.com/api/docs || exit 1
        
        # Test WebSocket connection
        node -e "
          const io = require('socket.io-client');
          const socket = io('https://ws.chemchat.com');
          socket.on('connect', () => {
            console.log('WebSocket connection successful');
            socket.disconnect();
            process.exit(0);
          });
          socket.on('connect_error', (err) => {
            console.error('WebSocket connection failed:', err);
            process.exit(1);
          });
          setTimeout(() => {
            console.error('WebSocket connection timeout');
            process.exit(1);
          }, 10000);
        "

    - name: Update deployment status
      run: |
        export KUBECONFIG=kubeconfig
        kubectl annotate deployment chemchat-api -n chemchat deployment.kubernetes.io/revision-history-limit=10
        kubectl annotate deployment chemchat-api -n chemchat deployment.kubernetes.io/last-deployed="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Production deployment completed: https://api.chemchat.com'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    needs: [deploy-production]
    environment:
      name: production
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout undo deployment/chemchat-api -n chemchat
        kubectl rollout status deployment/chemchat-api -n chemchat --timeout=300s

    - name: Verify rollback
      run: |
        sleep 30
        curl -f https://api.chemchat.com/health || exit 1

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        channel: '#alerts'
        text: 'Production deployment failed and was rolled back'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
