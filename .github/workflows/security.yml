name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate --json > npm-audit.json
        continue-on-error: true

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json

      - name: Run Snyk test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json > snyk-results.json
        continue-on-error: true

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: snyk-results.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t chemchat:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'chemchat:security-scan'
          format: 'json'
          output: 'trivy-results.json'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'chemchat:security-scan'
          format: 'json'
          output-file: 'grype-results.json'
          severity-cutoff: 'medium'

      - name: Upload Grype results
        uses: actions/upload-artifact@v4
        with:
          name: grype-results
          path: grype-results.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/docker
          generateSarif: '1'

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'k8s'
          iac_dir: 'k8s/'
          policy_type: 'k8s'
          only_warn: true
          sarif_upload: true

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scan,
        container-scan,
        secrets-scan,
        sast-scan,
        infrastructure-scan,
      ]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report - $(date)" > security-report.md
          echo "" >> security-report.md

          echo "## Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "" >> security-report.md

          echo "## Artifacts" >> security-report.md
          echo "The following security scan results are available as artifacts:" >> security-report.md
          echo "- npm-audit-results" >> security-report.md
          echo "- snyk-results" >> security-report.md
          echo "- trivy-results" >> security-report.md
          echo "- grype-results" >> security-report.md
          echo "" >> security-report.md

          if [ "${{ needs.dependency-scan.result }}" != "success" ] || 
             [ "${{ needs.container-scan.result }}" != "success" ] || 
             [ "${{ needs.secrets-scan.result }}" != "success" ] || 
             [ "${{ needs.sast-scan.result }}" != "success" ] || 
             [ "${{ needs.infrastructure-scan.result }}" != "success" ]; then
            echo "⚠️ **Security issues detected!** Please review the scan results." >> security-report.md
          else
            echo "✅ **All security scans passed successfully.**" >> security-report.md
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#security-alerts'
          text: 'Security scan failed for ${{ github.repository }}. Please review the results.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
