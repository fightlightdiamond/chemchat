// Enhanced Prisma Schema for CQRS Architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// EVENT STORE TABLES
// ===========================================

model EventStore {
  id           String   @id @default(cuid())
  aggregateId  String
  aggregateType String
  eventType    String
  eventData    Json
  version      Int
  tenantId     String?
  correlationId String?
  createdAt    DateTime @default(now())

  @@index([aggregateId, version])
  @@index([aggregateType])
  @@index([tenantId])
  @@index([createdAt])
  @@map("event_store")
}

model AggregateSnapshot {
  id           String   @id @default(cuid())
  aggregateId  String
  aggregateType String
  data         Json
  version      Int
  tenantId     String   @default("default")
  createdAt    DateTime @default(now())

  @@unique([aggregateId, tenantId], name: "aggregateId_tenantId")
  @@index([aggregateType])
  @@map("aggregate_snapshots")
}

// ===========================================
// OUTBOX PATTERN TABLES
// ===========================================

model OutboxEvent {
  id           String    @id @default(cuid())
  tenantId     String?
  aggregateType String
  aggregateId  String
  eventType    String
  eventData    Json
  retryCount   Int       @default(0)
  publishedAt  DateTime?
  createdAt   DateTime  @default(now())

  @@index([publishedAt])
  @@index([aggregateType, aggregateId])
  @@index([tenantId])
  @@map("outbox_events")
}

// ===========================================
// READ MODELS / PROJECTIONS
// ===========================================

model MessageProjection {
  id               String    @id
  conversationId   String
  senderId         String?
  content          String
  messageType      String
  sequenceNumber   BigInt
  createdAt        DateTime
  editedAt         DateTime?
  deletedAt        DateTime?
  tenantId         String
  // Denormalized fields for performance
  senderName       String
  conversationTitle String
  isEdited         Boolean   @default(false)
  isDeleted        Boolean   @default(false)

  @@index([conversationId, sequenceNumber])
  @@index([senderId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("message_projections")
}

model ConversationProjection {
  id                    String    @id
  title                 String
  type                  String
  lastMessageId         String?
  lastMessageContent    String?
  lastMessageAt         DateTime?
  lastMessageSenderId   String?
  lastMessageSenderName String?
  memberCount           Int       @default(0)
  unreadCount           Int       @default(0)
  tenantId              String
  createdAt             DateTime
  updatedAt             DateTime

  @@index([tenantId])
  @@index([lastMessageAt])
  @@map("conversation_projections")
}

model UserConversationProjection {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  tenantId       String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime?
  unreadCount    Int      @default(0)
  isActive       Boolean  @default(true)

  @@unique([userId, conversationId, tenantId])
  @@index([userId, tenantId])
  @@index([conversationId])
  @@map("user_conversation_projections")
}

// ===========================================
// WRITE MODELS (Domain Entities)
// ===========================================

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  displayName String?
  avatar      String?
  tenantId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sentMessages     Message[]
  conversations    UserConversation[]
  createdConversations Conversation[]

  @@index([tenantId])
  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  type      String   @default("group")
  tenantId  String?
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages  Message[]
  members   UserConversation[]
  creator   User?     @relation(fields: [createdBy], references: [id])

  @@index([tenantId])
  @@map("conversations")
}

model UserConversation {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime?
  tenantId       String?

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@index([conversationId])
  @@map("user_conversations")
}

model Message {
  id               String    @id @default(cuid())
  conversationId   String
  senderId         String?
  clientMessageId String?   @unique
  sequenceNumber   BigInt
  messageType      String    @default("text")
  content          Json
  editedAt         DateTime?
  deletedAt        DateTime?
  tenantId         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  sender       User?        @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, sequenceNumber])
  @@index([senderId])
  @@index([tenantId])
  @@index([clientMessageId])
  @@map("messages")
}

// ===========================================
// AUDIT AND MONITORING
// ===========================================

model CommandAudit {
  id           String   @id @default(cuid())
  commandType  String
  correlationId String?
  userId       String?
  tenantId     String?
  commandData  Json
  result       Json?
  status       String   // SUCCESS, FAILED
  errorMessage String?
  executionTimeMs Int
  createdAt    DateTime @default(now())

  @@index([commandType])
  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("command_audit")
}

model QueryAudit {
  id           String   @id @default(cuid())
  queryType    String
  userId       String?
  tenantId     String?
  queryData    Json
  resultCount  Int?
  executionTimeMs Int
  createdAt    DateTime @default(now())

  @@index([queryType])
  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("query_audit")
}

// ===========================================
// CACHING AND PERFORMANCE
// ===========================================

model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("cache_entries")
}

model PerformanceMetric {
  id           String   @id @default(cuid())
  operation    String
  duration     Int     // milliseconds
  success      Boolean
  errorMessage String?
  metadata     Json?
  createdAt    DateTime @default(now())

  @@index([operation])
  @@index([createdAt])
  @@map("performance_metrics")
}

// ===========================================
// SECURITY AND COMPLIANCE
// ===========================================

model SecurityEvent {
  id          String   @id @default(cuid())
  eventType   String
  severity    String   // LOW, MEDIUM, HIGH, CRITICAL
  userId      String?
  tenantId    String?
  ipAddress   String?
  userAgent   String?
  eventData   Json
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime @default(now())

  @@index([eventType])
  @@index([severity])
  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("security_events")
}

model DataRetentionPolicy {
  id           String   @id @default(cuid())
  entityType   String
  retentionDays Int
  tenantId     String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([entityType, tenantId])
  @@map("data_retention_policies")
}